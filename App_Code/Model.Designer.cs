//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Metadatos de relaciones en EDM

[assembly: EdmRelationshipAttribute("DBTecnoScienceModel", "FK_Productoo", "Productos", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DBTecnoScienceModel.Productos), "Compras", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DBTecnoScienceModel.Compras), true)]
[assembly: EdmRelationshipAttribute("DBTecnoScienceModel", "FK_Proveedor", "Proveedores", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DBTecnoScienceModel.Proveedores), "Compras", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DBTecnoScienceModel.Compras), true)]
[assembly: EdmRelationshipAttribute("DBTecnoScienceModel", "FK_Productos", "Productos", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DBTecnoScienceModel.Productos), "Ventas", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DBTecnoScienceModel.Ventas), true)]

#endregion

namespace DBTecnoScienceModel
{
    #region Contextos
    
    /// <summary>
    /// No hay documentación de metadatos disponible.
    /// </summary>
    public partial class DBTecnoScienceEntities2 : ObjectContext
    {
        #region Constructores
    
        /// <summary>
        /// Inicializa un nuevo objeto DBTecnoScienceEntities2 usando la cadena de conexión encontrada en la sección 'DBTecnoScienceEntities2' del archivo de configuración de la aplicación.
        /// </summary>
        public DBTecnoScienceEntities2() : base("name=DBTecnoScienceEntities2", "DBTecnoScienceEntities2")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Inicializar un nuevo objeto DBTecnoScienceEntities2.
        /// </summary>
        public DBTecnoScienceEntities2(string connectionString) : base(connectionString, "DBTecnoScienceEntities2")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Inicializar un nuevo objeto DBTecnoScienceEntities2.
        /// </summary>
        public DBTecnoScienceEntities2(EntityConnection connection) : base(connection, "DBTecnoScienceEntities2")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Métodos parciales
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Propiedades de ObjectSet
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        public ObjectSet<Compras> Compras
        {
            get
            {
                if ((_Compras == null))
                {
                    _Compras = base.CreateObjectSet<Compras>("Compras");
                }
                return _Compras;
            }
        }
        private ObjectSet<Compras> _Compras;
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        public ObjectSet<Productos> Productos
        {
            get
            {
                if ((_Productos == null))
                {
                    _Productos = base.CreateObjectSet<Productos>("Productos");
                }
                return _Productos;
            }
        }
        private ObjectSet<Productos> _Productos;
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        public ObjectSet<Proveedores> Proveedores
        {
            get
            {
                if ((_Proveedores == null))
                {
                    _Proveedores = base.CreateObjectSet<Proveedores>("Proveedores");
                }
                return _Proveedores;
            }
        }
        private ObjectSet<Proveedores> _Proveedores;
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        public ObjectSet<Ventas> Ventas
        {
            get
            {
                if ((_Ventas == null))
                {
                    _Ventas = base.CreateObjectSet<Ventas>("Ventas");
                }
                return _Ventas;
            }
        }
        private ObjectSet<Ventas> _Ventas;

        #endregion

        #region Métodos AddTo
    
        /// <summary>
        /// Método desusado para agregar un nuevo objeto al EntitySet Compras. Considere la posibilidad de usar el método .Add de la propiedad ObjectSet&lt;T&gt; asociada.
        /// </summary>
        public void AddToCompras(Compras compras)
        {
            base.AddObject("Compras", compras);
        }
    
        /// <summary>
        /// Método desusado para agregar un nuevo objeto al EntitySet Productos. Considere la posibilidad de usar el método .Add de la propiedad ObjectSet&lt;T&gt; asociada.
        /// </summary>
        public void AddToProductos(Productos productos)
        {
            base.AddObject("Productos", productos);
        }
    
        /// <summary>
        /// Método desusado para agregar un nuevo objeto al EntitySet Proveedores. Considere la posibilidad de usar el método .Add de la propiedad ObjectSet&lt;T&gt; asociada.
        /// </summary>
        public void AddToProveedores(Proveedores proveedores)
        {
            base.AddObject("Proveedores", proveedores);
        }
    
        /// <summary>
        /// Método desusado para agregar un nuevo objeto al EntitySet Ventas. Considere la posibilidad de usar el método .Add de la propiedad ObjectSet&lt;T&gt; asociada.
        /// </summary>
        public void AddToVentas(Ventas ventas)
        {
            base.AddObject("Ventas", ventas);
        }

        #endregion

        #region Importaciones de funciones
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="idCompra">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Compras> BUSCARCOMPRAS(global::System.String idCompra)
        {
            ObjectParameter idCompraParameter;
            if (idCompra != null)
            {
                idCompraParameter = new ObjectParameter("IdCompra", idCompra);
            }
            else
            {
                idCompraParameter = new ObjectParameter("IdCompra", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Compras>("BUSCARCOMPRAS", idCompraParameter);
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="idCompra">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Compras> BUSCARCOMPRAS(global::System.String idCompra, MergeOption mergeOption)
        {
            ObjectParameter idCompraParameter;
            if (idCompra != null)
            {
                idCompraParameter = new ObjectParameter("IdCompra", idCompra);
            }
            else
            {
                idCompraParameter = new ObjectParameter("IdCompra", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Compras>("BUSCARCOMPRAS", mergeOption, idCompraParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="idProducto">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Productos> BUSCARPRODUCTO(global::System.String idProducto)
        {
            ObjectParameter idProductoParameter;
            if (idProducto != null)
            {
                idProductoParameter = new ObjectParameter("IdProducto", idProducto);
            }
            else
            {
                idProductoParameter = new ObjectParameter("IdProducto", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Productos>("BUSCARPRODUCTO", idProductoParameter);
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="idProducto">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Productos> BUSCARPRODUCTO(global::System.String idProducto, MergeOption mergeOption)
        {
            ObjectParameter idProductoParameter;
            if (idProducto != null)
            {
                idProductoParameter = new ObjectParameter("IdProducto", idProducto);
            }
            else
            {
                idProductoParameter = new ObjectParameter("IdProducto", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Productos>("BUSCARPRODUCTO", mergeOption, idProductoParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="idProveedor">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Proveedores> BUSCARPROVEEDORES(global::System.String idProveedor)
        {
            ObjectParameter idProveedorParameter;
            if (idProveedor != null)
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", idProveedor);
            }
            else
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Proveedores>("BUSCARPROVEEDORES", idProveedorParameter);
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="idProveedor">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Proveedores> BUSCARPROVEEDORES(global::System.String idProveedor, MergeOption mergeOption)
        {
            ObjectParameter idProveedorParameter;
            if (idProveedor != null)
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", idProveedor);
            }
            else
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Proveedores>("BUSCARPROVEEDORES", mergeOption, idProveedorParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="id_Ventas">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Ventas> BUSCARVENTA(global::System.String id_Ventas)
        {
            ObjectParameter id_VentasParameter;
            if (id_Ventas != null)
            {
                id_VentasParameter = new ObjectParameter("Id_Ventas", id_Ventas);
            }
            else
            {
                id_VentasParameter = new ObjectParameter("Id_Ventas", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Ventas>("BUSCARVENTA", id_VentasParameter);
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="id_Ventas">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Ventas> BUSCARVENTA(global::System.String id_Ventas, MergeOption mergeOption)
        {
            ObjectParameter id_VentasParameter;
            if (id_Ventas != null)
            {
                id_VentasParameter = new ObjectParameter("Id_Ventas", id_Ventas);
            }
            else
            {
                id_VentasParameter = new ObjectParameter("Id_Ventas", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Ventas>("BUSCARVENTA", mergeOption, id_VentasParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        public ObjectResult<Productos> CONSULTAGENERALPRODUCTO()
        {
            return base.ExecuteFunction<Productos>("CONSULTAGENERALPRODUCTO");
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="mergeOption"></param>
        public ObjectResult<Productos> CONSULTAGENERALPRODUCTO(MergeOption mergeOption)
        {
            return base.ExecuteFunction<Productos>("CONSULTAGENERALPRODUCTO", mergeOption);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="idCompra">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Compras> ELIMINARCOMPRAS(global::System.String idCompra)
        {
            ObjectParameter idCompraParameter;
            if (idCompra != null)
            {
                idCompraParameter = new ObjectParameter("IdCompra", idCompra);
            }
            else
            {
                idCompraParameter = new ObjectParameter("IdCompra", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Compras>("ELIMINARCOMPRAS", idCompraParameter);
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="idCompra">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Compras> ELIMINARCOMPRAS(global::System.String idCompra, MergeOption mergeOption)
        {
            ObjectParameter idCompraParameter;
            if (idCompra != null)
            {
                idCompraParameter = new ObjectParameter("IdCompra", idCompra);
            }
            else
            {
                idCompraParameter = new ObjectParameter("IdCompra", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Compras>("ELIMINARCOMPRAS", mergeOption, idCompraParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="idProducto">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Productos> ELIMINARPRODUCTO(global::System.String idProducto)
        {
            ObjectParameter idProductoParameter;
            if (idProducto != null)
            {
                idProductoParameter = new ObjectParameter("IdProducto", idProducto);
            }
            else
            {
                idProductoParameter = new ObjectParameter("IdProducto", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Productos>("ELIMINARPRODUCTO", idProductoParameter);
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="idProducto">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Productos> ELIMINARPRODUCTO(global::System.String idProducto, MergeOption mergeOption)
        {
            ObjectParameter idProductoParameter;
            if (idProducto != null)
            {
                idProductoParameter = new ObjectParameter("IdProducto", idProducto);
            }
            else
            {
                idProductoParameter = new ObjectParameter("IdProducto", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Productos>("ELIMINARPRODUCTO", mergeOption, idProductoParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="idProveedor">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Proveedores> ELIMINARPROVEEDORES(global::System.String idProveedor)
        {
            ObjectParameter idProveedorParameter;
            if (idProveedor != null)
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", idProveedor);
            }
            else
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Proveedores>("ELIMINARPROVEEDORES", idProveedorParameter);
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="idProveedor">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Proveedores> ELIMINARPROVEEDORES(global::System.String idProveedor, MergeOption mergeOption)
        {
            ObjectParameter idProveedorParameter;
            if (idProveedor != null)
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", idProveedor);
            }
            else
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Proveedores>("ELIMINARPROVEEDORES", mergeOption, idProveedorParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="id_Ventas">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Ventas> ELIMINARVENTAS(global::System.String id_Ventas)
        {
            ObjectParameter id_VentasParameter;
            if (id_Ventas != null)
            {
                id_VentasParameter = new ObjectParameter("Id_Ventas", id_Ventas);
            }
            else
            {
                id_VentasParameter = new ObjectParameter("Id_Ventas", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Ventas>("ELIMINARVENTAS", id_VentasParameter);
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="id_Ventas">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Ventas> ELIMINARVENTAS(global::System.String id_Ventas, MergeOption mergeOption)
        {
            ObjectParameter id_VentasParameter;
            if (id_Ventas != null)
            {
                id_VentasParameter = new ObjectParameter("Id_Ventas", id_Ventas);
            }
            else
            {
                id_VentasParameter = new ObjectParameter("Id_Ventas", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Ventas>("ELIMINARVENTAS", mergeOption, id_VentasParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="idProducto">No hay documentación de metadatos disponible.</param>
        /// <param name="nombre_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="cantidad_Existente">No hay documentación de metadatos disponible.</param>
        /// <param name="precio_Unitario">No hay documentación de metadatos disponible.</param>
        /// <param name="categoria_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="marca_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="descripcion_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="imagenMerc">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Productos> MODIFICARPRODUCTO(global::System.String idProducto, global::System.String nombre_Producto, global::System.String cantidad_Existente, global::System.String precio_Unitario, global::System.String categoria_Producto, global::System.String marca_Producto, global::System.String descripcion_Producto, global::System.String imagenMerc)
        {
            ObjectParameter idProductoParameter;
            if (idProducto != null)
            {
                idProductoParameter = new ObjectParameter("IdProducto", idProducto);
            }
            else
            {
                idProductoParameter = new ObjectParameter("IdProducto", typeof(global::System.String));
            }
    
            ObjectParameter nombre_ProductoParameter;
            if (nombre_Producto != null)
            {
                nombre_ProductoParameter = new ObjectParameter("Nombre_Producto", nombre_Producto);
            }
            else
            {
                nombre_ProductoParameter = new ObjectParameter("Nombre_Producto", typeof(global::System.String));
            }
    
            ObjectParameter cantidad_ExistenteParameter;
            if (cantidad_Existente != null)
            {
                cantidad_ExistenteParameter = new ObjectParameter("Cantidad_Existente", cantidad_Existente);
            }
            else
            {
                cantidad_ExistenteParameter = new ObjectParameter("Cantidad_Existente", typeof(global::System.String));
            }
    
            ObjectParameter precio_UnitarioParameter;
            if (precio_Unitario != null)
            {
                precio_UnitarioParameter = new ObjectParameter("Precio_Unitario", precio_Unitario);
            }
            else
            {
                precio_UnitarioParameter = new ObjectParameter("Precio_Unitario", typeof(global::System.String));
            }
    
            ObjectParameter categoria_ProductoParameter;
            if (categoria_Producto != null)
            {
                categoria_ProductoParameter = new ObjectParameter("Categoria_Producto", categoria_Producto);
            }
            else
            {
                categoria_ProductoParameter = new ObjectParameter("Categoria_Producto", typeof(global::System.String));
            }
    
            ObjectParameter marca_ProductoParameter;
            if (marca_Producto != null)
            {
                marca_ProductoParameter = new ObjectParameter("Marca_Producto", marca_Producto);
            }
            else
            {
                marca_ProductoParameter = new ObjectParameter("Marca_Producto", typeof(global::System.String));
            }
    
            ObjectParameter descripcion_ProductoParameter;
            if (descripcion_Producto != null)
            {
                descripcion_ProductoParameter = new ObjectParameter("Descripcion_Producto", descripcion_Producto);
            }
            else
            {
                descripcion_ProductoParameter = new ObjectParameter("Descripcion_Producto", typeof(global::System.String));
            }
    
            ObjectParameter imagenMercParameter;
            if (imagenMerc != null)
            {
                imagenMercParameter = new ObjectParameter("ImagenMerc", imagenMerc);
            }
            else
            {
                imagenMercParameter = new ObjectParameter("ImagenMerc", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Productos>("MODIFICARPRODUCTO", idProductoParameter, nombre_ProductoParameter, cantidad_ExistenteParameter, precio_UnitarioParameter, categoria_ProductoParameter, marca_ProductoParameter, descripcion_ProductoParameter, imagenMercParameter);
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="idProducto">No hay documentación de metadatos disponible.</param>
        /// <param name="nombre_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="cantidad_Existente">No hay documentación de metadatos disponible.</param>
        /// <param name="precio_Unitario">No hay documentación de metadatos disponible.</param>
        /// <param name="categoria_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="marca_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="descripcion_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="imagenMerc">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Productos> MODIFICARPRODUCTO(global::System.String idProducto, global::System.String nombre_Producto, global::System.String cantidad_Existente, global::System.String precio_Unitario, global::System.String categoria_Producto, global::System.String marca_Producto, global::System.String descripcion_Producto, global::System.String imagenMerc, MergeOption mergeOption)
        {
            ObjectParameter idProductoParameter;
            if (idProducto != null)
            {
                idProductoParameter = new ObjectParameter("IdProducto", idProducto);
            }
            else
            {
                idProductoParameter = new ObjectParameter("IdProducto", typeof(global::System.String));
            }
    
            ObjectParameter nombre_ProductoParameter;
            if (nombre_Producto != null)
            {
                nombre_ProductoParameter = new ObjectParameter("Nombre_Producto", nombre_Producto);
            }
            else
            {
                nombre_ProductoParameter = new ObjectParameter("Nombre_Producto", typeof(global::System.String));
            }
    
            ObjectParameter cantidad_ExistenteParameter;
            if (cantidad_Existente != null)
            {
                cantidad_ExistenteParameter = new ObjectParameter("Cantidad_Existente", cantidad_Existente);
            }
            else
            {
                cantidad_ExistenteParameter = new ObjectParameter("Cantidad_Existente", typeof(global::System.String));
            }
    
            ObjectParameter precio_UnitarioParameter;
            if (precio_Unitario != null)
            {
                precio_UnitarioParameter = new ObjectParameter("Precio_Unitario", precio_Unitario);
            }
            else
            {
                precio_UnitarioParameter = new ObjectParameter("Precio_Unitario", typeof(global::System.String));
            }
    
            ObjectParameter categoria_ProductoParameter;
            if (categoria_Producto != null)
            {
                categoria_ProductoParameter = new ObjectParameter("Categoria_Producto", categoria_Producto);
            }
            else
            {
                categoria_ProductoParameter = new ObjectParameter("Categoria_Producto", typeof(global::System.String));
            }
    
            ObjectParameter marca_ProductoParameter;
            if (marca_Producto != null)
            {
                marca_ProductoParameter = new ObjectParameter("Marca_Producto", marca_Producto);
            }
            else
            {
                marca_ProductoParameter = new ObjectParameter("Marca_Producto", typeof(global::System.String));
            }
    
            ObjectParameter descripcion_ProductoParameter;
            if (descripcion_Producto != null)
            {
                descripcion_ProductoParameter = new ObjectParameter("Descripcion_Producto", descripcion_Producto);
            }
            else
            {
                descripcion_ProductoParameter = new ObjectParameter("Descripcion_Producto", typeof(global::System.String));
            }
    
            ObjectParameter imagenMercParameter;
            if (imagenMerc != null)
            {
                imagenMercParameter = new ObjectParameter("ImagenMerc", imagenMerc);
            }
            else
            {
                imagenMercParameter = new ObjectParameter("ImagenMerc", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Productos>("MODIFICARPRODUCTO", mergeOption, idProductoParameter, nombre_ProductoParameter, cantidad_ExistenteParameter, precio_UnitarioParameter, categoria_ProductoParameter, marca_ProductoParameter, descripcion_ProductoParameter, imagenMercParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="idCompra">No hay documentación de metadatos disponible.</param>
        /// <param name="idProducto">No hay documentación de metadatos disponible.</param>
        /// <param name="idProveedor">No hay documentación de metadatos disponible.</param>
        /// <param name="nombre_Proveedor">No hay documentación de metadatos disponible.</param>
        /// <param name="fechaDeCompra">No hay documentación de metadatos disponible.</param>
        /// <param name="cantidadComprada">No hay documentación de metadatos disponible.</param>
        /// <param name="totalCompra">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Compras> REGISTRARCOMPRAS(global::System.String idCompra, global::System.String idProducto, global::System.String idProveedor, global::System.String nombre_Proveedor, global::System.String fechaDeCompra, global::System.String cantidadComprada, global::System.String totalCompra)
        {
            ObjectParameter idCompraParameter;
            if (idCompra != null)
            {
                idCompraParameter = new ObjectParameter("IdCompra", idCompra);
            }
            else
            {
                idCompraParameter = new ObjectParameter("IdCompra", typeof(global::System.String));
            }
    
            ObjectParameter idProductoParameter;
            if (idProducto != null)
            {
                idProductoParameter = new ObjectParameter("IdProducto", idProducto);
            }
            else
            {
                idProductoParameter = new ObjectParameter("IdProducto", typeof(global::System.String));
            }
    
            ObjectParameter idProveedorParameter;
            if (idProveedor != null)
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", idProveedor);
            }
            else
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", typeof(global::System.String));
            }
    
            ObjectParameter nombre_ProveedorParameter;
            if (nombre_Proveedor != null)
            {
                nombre_ProveedorParameter = new ObjectParameter("Nombre_Proveedor", nombre_Proveedor);
            }
            else
            {
                nombre_ProveedorParameter = new ObjectParameter("Nombre_Proveedor", typeof(global::System.String));
            }
    
            ObjectParameter fechaDeCompraParameter;
            if (fechaDeCompra != null)
            {
                fechaDeCompraParameter = new ObjectParameter("FechaDeCompra", fechaDeCompra);
            }
            else
            {
                fechaDeCompraParameter = new ObjectParameter("FechaDeCompra", typeof(global::System.String));
            }
    
            ObjectParameter cantidadCompradaParameter;
            if (cantidadComprada != null)
            {
                cantidadCompradaParameter = new ObjectParameter("CantidadComprada", cantidadComprada);
            }
            else
            {
                cantidadCompradaParameter = new ObjectParameter("CantidadComprada", typeof(global::System.String));
            }
    
            ObjectParameter totalCompraParameter;
            if (totalCompra != null)
            {
                totalCompraParameter = new ObjectParameter("TotalCompra", totalCompra);
            }
            else
            {
                totalCompraParameter = new ObjectParameter("TotalCompra", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Compras>("REGISTRARCOMPRAS", idCompraParameter, idProductoParameter, idProveedorParameter, nombre_ProveedorParameter, fechaDeCompraParameter, cantidadCompradaParameter, totalCompraParameter);
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="idCompra">No hay documentación de metadatos disponible.</param>
        /// <param name="idProducto">No hay documentación de metadatos disponible.</param>
        /// <param name="idProveedor">No hay documentación de metadatos disponible.</param>
        /// <param name="nombre_Proveedor">No hay documentación de metadatos disponible.</param>
        /// <param name="fechaDeCompra">No hay documentación de metadatos disponible.</param>
        /// <param name="cantidadComprada">No hay documentación de metadatos disponible.</param>
        /// <param name="totalCompra">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Compras> REGISTRARCOMPRAS(global::System.String idCompra, global::System.String idProducto, global::System.String idProveedor, global::System.String nombre_Proveedor, global::System.String fechaDeCompra, global::System.String cantidadComprada, global::System.String totalCompra, MergeOption mergeOption)
        {
            ObjectParameter idCompraParameter;
            if (idCompra != null)
            {
                idCompraParameter = new ObjectParameter("IdCompra", idCompra);
            }
            else
            {
                idCompraParameter = new ObjectParameter("IdCompra", typeof(global::System.String));
            }
    
            ObjectParameter idProductoParameter;
            if (idProducto != null)
            {
                idProductoParameter = new ObjectParameter("IdProducto", idProducto);
            }
            else
            {
                idProductoParameter = new ObjectParameter("IdProducto", typeof(global::System.String));
            }
    
            ObjectParameter idProveedorParameter;
            if (idProveedor != null)
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", idProveedor);
            }
            else
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", typeof(global::System.String));
            }
    
            ObjectParameter nombre_ProveedorParameter;
            if (nombre_Proveedor != null)
            {
                nombre_ProveedorParameter = new ObjectParameter("Nombre_Proveedor", nombre_Proveedor);
            }
            else
            {
                nombre_ProveedorParameter = new ObjectParameter("Nombre_Proveedor", typeof(global::System.String));
            }
    
            ObjectParameter fechaDeCompraParameter;
            if (fechaDeCompra != null)
            {
                fechaDeCompraParameter = new ObjectParameter("FechaDeCompra", fechaDeCompra);
            }
            else
            {
                fechaDeCompraParameter = new ObjectParameter("FechaDeCompra", typeof(global::System.String));
            }
    
            ObjectParameter cantidadCompradaParameter;
            if (cantidadComprada != null)
            {
                cantidadCompradaParameter = new ObjectParameter("CantidadComprada", cantidadComprada);
            }
            else
            {
                cantidadCompradaParameter = new ObjectParameter("CantidadComprada", typeof(global::System.String));
            }
    
            ObjectParameter totalCompraParameter;
            if (totalCompra != null)
            {
                totalCompraParameter = new ObjectParameter("TotalCompra", totalCompra);
            }
            else
            {
                totalCompraParameter = new ObjectParameter("TotalCompra", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Compras>("REGISTRARCOMPRAS", mergeOption, idCompraParameter, idProductoParameter, idProveedorParameter, nombre_ProveedorParameter, fechaDeCompraParameter, cantidadCompradaParameter, totalCompraParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="idProducto">No hay documentación de metadatos disponible.</param>
        /// <param name="nombre_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="cantidad_Existente">No hay documentación de metadatos disponible.</param>
        /// <param name="precio_Unitario">No hay documentación de metadatos disponible.</param>
        /// <param name="categoria_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="marca_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="descripcion_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="imagenMerc">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Productos> REGISTRARPRODUCTO(global::System.String idProducto, global::System.String nombre_Producto, global::System.String cantidad_Existente, global::System.String precio_Unitario, global::System.String categoria_Producto, global::System.String marca_Producto, global::System.String descripcion_Producto, global::System.String imagenMerc)
        {
            ObjectParameter idProductoParameter;
            if (idProducto != null)
            {
                idProductoParameter = new ObjectParameter("IdProducto", idProducto);
            }
            else
            {
                idProductoParameter = new ObjectParameter("IdProducto", typeof(global::System.String));
            }
    
            ObjectParameter nombre_ProductoParameter;
            if (nombre_Producto != null)
            {
                nombre_ProductoParameter = new ObjectParameter("Nombre_Producto", nombre_Producto);
            }
            else
            {
                nombre_ProductoParameter = new ObjectParameter("Nombre_Producto", typeof(global::System.String));
            }
    
            ObjectParameter cantidad_ExistenteParameter;
            if (cantidad_Existente != null)
            {
                cantidad_ExistenteParameter = new ObjectParameter("Cantidad_Existente", cantidad_Existente);
            }
            else
            {
                cantidad_ExistenteParameter = new ObjectParameter("Cantidad_Existente", typeof(global::System.String));
            }
    
            ObjectParameter precio_UnitarioParameter;
            if (precio_Unitario != null)
            {
                precio_UnitarioParameter = new ObjectParameter("Precio_Unitario", precio_Unitario);
            }
            else
            {
                precio_UnitarioParameter = new ObjectParameter("Precio_Unitario", typeof(global::System.String));
            }
    
            ObjectParameter categoria_ProductoParameter;
            if (categoria_Producto != null)
            {
                categoria_ProductoParameter = new ObjectParameter("Categoria_Producto", categoria_Producto);
            }
            else
            {
                categoria_ProductoParameter = new ObjectParameter("Categoria_Producto", typeof(global::System.String));
            }
    
            ObjectParameter marca_ProductoParameter;
            if (marca_Producto != null)
            {
                marca_ProductoParameter = new ObjectParameter("Marca_Producto", marca_Producto);
            }
            else
            {
                marca_ProductoParameter = new ObjectParameter("Marca_Producto", typeof(global::System.String));
            }
    
            ObjectParameter descripcion_ProductoParameter;
            if (descripcion_Producto != null)
            {
                descripcion_ProductoParameter = new ObjectParameter("Descripcion_Producto", descripcion_Producto);
            }
            else
            {
                descripcion_ProductoParameter = new ObjectParameter("Descripcion_Producto", typeof(global::System.String));
            }
    
            ObjectParameter imagenMercParameter;
            if (imagenMerc != null)
            {
                imagenMercParameter = new ObjectParameter("ImagenMerc", imagenMerc);
            }
            else
            {
                imagenMercParameter = new ObjectParameter("ImagenMerc", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Productos>("REGISTRARPRODUCTO", idProductoParameter, nombre_ProductoParameter, cantidad_ExistenteParameter, precio_UnitarioParameter, categoria_ProductoParameter, marca_ProductoParameter, descripcion_ProductoParameter, imagenMercParameter);
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="idProducto">No hay documentación de metadatos disponible.</param>
        /// <param name="nombre_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="cantidad_Existente">No hay documentación de metadatos disponible.</param>
        /// <param name="precio_Unitario">No hay documentación de metadatos disponible.</param>
        /// <param name="categoria_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="marca_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="descripcion_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="imagenMerc">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Productos> REGISTRARPRODUCTO(global::System.String idProducto, global::System.String nombre_Producto, global::System.String cantidad_Existente, global::System.String precio_Unitario, global::System.String categoria_Producto, global::System.String marca_Producto, global::System.String descripcion_Producto, global::System.String imagenMerc, MergeOption mergeOption)
        {
            ObjectParameter idProductoParameter;
            if (idProducto != null)
            {
                idProductoParameter = new ObjectParameter("IdProducto", idProducto);
            }
            else
            {
                idProductoParameter = new ObjectParameter("IdProducto", typeof(global::System.String));
            }
    
            ObjectParameter nombre_ProductoParameter;
            if (nombre_Producto != null)
            {
                nombre_ProductoParameter = new ObjectParameter("Nombre_Producto", nombre_Producto);
            }
            else
            {
                nombre_ProductoParameter = new ObjectParameter("Nombre_Producto", typeof(global::System.String));
            }
    
            ObjectParameter cantidad_ExistenteParameter;
            if (cantidad_Existente != null)
            {
                cantidad_ExistenteParameter = new ObjectParameter("Cantidad_Existente", cantidad_Existente);
            }
            else
            {
                cantidad_ExistenteParameter = new ObjectParameter("Cantidad_Existente", typeof(global::System.String));
            }
    
            ObjectParameter precio_UnitarioParameter;
            if (precio_Unitario != null)
            {
                precio_UnitarioParameter = new ObjectParameter("Precio_Unitario", precio_Unitario);
            }
            else
            {
                precio_UnitarioParameter = new ObjectParameter("Precio_Unitario", typeof(global::System.String));
            }
    
            ObjectParameter categoria_ProductoParameter;
            if (categoria_Producto != null)
            {
                categoria_ProductoParameter = new ObjectParameter("Categoria_Producto", categoria_Producto);
            }
            else
            {
                categoria_ProductoParameter = new ObjectParameter("Categoria_Producto", typeof(global::System.String));
            }
    
            ObjectParameter marca_ProductoParameter;
            if (marca_Producto != null)
            {
                marca_ProductoParameter = new ObjectParameter("Marca_Producto", marca_Producto);
            }
            else
            {
                marca_ProductoParameter = new ObjectParameter("Marca_Producto", typeof(global::System.String));
            }
    
            ObjectParameter descripcion_ProductoParameter;
            if (descripcion_Producto != null)
            {
                descripcion_ProductoParameter = new ObjectParameter("Descripcion_Producto", descripcion_Producto);
            }
            else
            {
                descripcion_ProductoParameter = new ObjectParameter("Descripcion_Producto", typeof(global::System.String));
            }
    
            ObjectParameter imagenMercParameter;
            if (imagenMerc != null)
            {
                imagenMercParameter = new ObjectParameter("ImagenMerc", imagenMerc);
            }
            else
            {
                imagenMercParameter = new ObjectParameter("ImagenMerc", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Productos>("REGISTRARPRODUCTO", mergeOption, idProductoParameter, nombre_ProductoParameter, cantidad_ExistenteParameter, precio_UnitarioParameter, categoria_ProductoParameter, marca_ProductoParameter, descripcion_ProductoParameter, imagenMercParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="idProveedor">No hay documentación de metadatos disponible.</param>
        /// <param name="nombreProveedor">No hay documentación de metadatos disponible.</param>
        /// <param name="direccionProveedor">No hay documentación de metadatos disponible.</param>
        /// <param name="telefonoProveedor">No hay documentación de metadatos disponible.</param>
        /// <param name="ciudadProveedor">No hay documentación de metadatos disponible.</param>
        /// <param name="estadoProveedor">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Proveedores> REGISTRARPROVEEDORES(global::System.String idProveedor, global::System.String nombreProveedor, global::System.String direccionProveedor, global::System.String telefonoProveedor, global::System.String ciudadProveedor, global::System.String estadoProveedor)
        {
            ObjectParameter idProveedorParameter;
            if (idProveedor != null)
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", idProveedor);
            }
            else
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", typeof(global::System.String));
            }
    
            ObjectParameter nombreProveedorParameter;
            if (nombreProveedor != null)
            {
                nombreProveedorParameter = new ObjectParameter("NombreProveedor", nombreProveedor);
            }
            else
            {
                nombreProveedorParameter = new ObjectParameter("NombreProveedor", typeof(global::System.String));
            }
    
            ObjectParameter direccionProveedorParameter;
            if (direccionProveedor != null)
            {
                direccionProveedorParameter = new ObjectParameter("DireccionProveedor", direccionProveedor);
            }
            else
            {
                direccionProveedorParameter = new ObjectParameter("DireccionProveedor", typeof(global::System.String));
            }
    
            ObjectParameter telefonoProveedorParameter;
            if (telefonoProveedor != null)
            {
                telefonoProveedorParameter = new ObjectParameter("TelefonoProveedor", telefonoProveedor);
            }
            else
            {
                telefonoProveedorParameter = new ObjectParameter("TelefonoProveedor", typeof(global::System.String));
            }
    
            ObjectParameter ciudadProveedorParameter;
            if (ciudadProveedor != null)
            {
                ciudadProveedorParameter = new ObjectParameter("CiudadProveedor", ciudadProveedor);
            }
            else
            {
                ciudadProveedorParameter = new ObjectParameter("CiudadProveedor", typeof(global::System.String));
            }
    
            ObjectParameter estadoProveedorParameter;
            if (estadoProveedor != null)
            {
                estadoProveedorParameter = new ObjectParameter("EstadoProveedor", estadoProveedor);
            }
            else
            {
                estadoProveedorParameter = new ObjectParameter("EstadoProveedor", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Proveedores>("REGISTRARPROVEEDORES", idProveedorParameter, nombreProveedorParameter, direccionProveedorParameter, telefonoProveedorParameter, ciudadProveedorParameter, estadoProveedorParameter);
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="idProveedor">No hay documentación de metadatos disponible.</param>
        /// <param name="nombreProveedor">No hay documentación de metadatos disponible.</param>
        /// <param name="direccionProveedor">No hay documentación de metadatos disponible.</param>
        /// <param name="telefonoProveedor">No hay documentación de metadatos disponible.</param>
        /// <param name="ciudadProveedor">No hay documentación de metadatos disponible.</param>
        /// <param name="estadoProveedor">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Proveedores> REGISTRARPROVEEDORES(global::System.String idProveedor, global::System.String nombreProveedor, global::System.String direccionProveedor, global::System.String telefonoProveedor, global::System.String ciudadProveedor, global::System.String estadoProveedor, MergeOption mergeOption)
        {
            ObjectParameter idProveedorParameter;
            if (idProveedor != null)
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", idProveedor);
            }
            else
            {
                idProveedorParameter = new ObjectParameter("IdProveedor", typeof(global::System.String));
            }
    
            ObjectParameter nombreProveedorParameter;
            if (nombreProveedor != null)
            {
                nombreProveedorParameter = new ObjectParameter("NombreProveedor", nombreProveedor);
            }
            else
            {
                nombreProveedorParameter = new ObjectParameter("NombreProveedor", typeof(global::System.String));
            }
    
            ObjectParameter direccionProveedorParameter;
            if (direccionProveedor != null)
            {
                direccionProveedorParameter = new ObjectParameter("DireccionProveedor", direccionProveedor);
            }
            else
            {
                direccionProveedorParameter = new ObjectParameter("DireccionProveedor", typeof(global::System.String));
            }
    
            ObjectParameter telefonoProveedorParameter;
            if (telefonoProveedor != null)
            {
                telefonoProveedorParameter = new ObjectParameter("TelefonoProveedor", telefonoProveedor);
            }
            else
            {
                telefonoProveedorParameter = new ObjectParameter("TelefonoProveedor", typeof(global::System.String));
            }
    
            ObjectParameter ciudadProveedorParameter;
            if (ciudadProveedor != null)
            {
                ciudadProveedorParameter = new ObjectParameter("CiudadProveedor", ciudadProveedor);
            }
            else
            {
                ciudadProveedorParameter = new ObjectParameter("CiudadProveedor", typeof(global::System.String));
            }
    
            ObjectParameter estadoProveedorParameter;
            if (estadoProveedor != null)
            {
                estadoProveedorParameter = new ObjectParameter("EstadoProveedor", estadoProveedor);
            }
            else
            {
                estadoProveedorParameter = new ObjectParameter("EstadoProveedor", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Proveedores>("REGISTRARPROVEEDORES", mergeOption, idProveedorParameter, nombreProveedorParameter, direccionProveedorParameter, telefonoProveedorParameter, ciudadProveedorParameter, estadoProveedorParameter);
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="id_Ventas">No hay documentación de metadatos disponible.</param>
        /// <param name="idProducto">No hay documentación de metadatos disponible.</param>
        /// <param name="cantidad_Venta">No hay documentación de metadatos disponible.</param>
        /// <param name="nombre_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="fechaVenta">No hay documentación de metadatos disponible.</param>
        /// <param name="descuento">No hay documentación de metadatos disponible.</param>
        /// <param name="total_Venta">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Ventas> REGISTRARVENTAS(global::System.String id_Ventas, global::System.String idProducto, global::System.String cantidad_Venta, global::System.String nombre_Producto, global::System.String fechaVenta, global::System.String descuento, global::System.String total_Venta)
        {
            ObjectParameter id_VentasParameter;
            if (id_Ventas != null)
            {
                id_VentasParameter = new ObjectParameter("Id_Ventas", id_Ventas);
            }
            else
            {
                id_VentasParameter = new ObjectParameter("Id_Ventas", typeof(global::System.String));
            }
    
            ObjectParameter idProductoParameter;
            if (idProducto != null)
            {
                idProductoParameter = new ObjectParameter("IdProducto", idProducto);
            }
            else
            {
                idProductoParameter = new ObjectParameter("IdProducto", typeof(global::System.String));
            }
    
            ObjectParameter cantidad_VentaParameter;
            if (cantidad_Venta != null)
            {
                cantidad_VentaParameter = new ObjectParameter("Cantidad_Venta", cantidad_Venta);
            }
            else
            {
                cantidad_VentaParameter = new ObjectParameter("Cantidad_Venta", typeof(global::System.String));
            }
    
            ObjectParameter nombre_ProductoParameter;
            if (nombre_Producto != null)
            {
                nombre_ProductoParameter = new ObjectParameter("Nombre_Producto", nombre_Producto);
            }
            else
            {
                nombre_ProductoParameter = new ObjectParameter("Nombre_Producto", typeof(global::System.String));
            }
    
            ObjectParameter fechaVentaParameter;
            if (fechaVenta != null)
            {
                fechaVentaParameter = new ObjectParameter("FechaVenta", fechaVenta);
            }
            else
            {
                fechaVentaParameter = new ObjectParameter("FechaVenta", typeof(global::System.String));
            }
    
            ObjectParameter descuentoParameter;
            if (descuento != null)
            {
                descuentoParameter = new ObjectParameter("Descuento", descuento);
            }
            else
            {
                descuentoParameter = new ObjectParameter("Descuento", typeof(global::System.String));
            }
    
            ObjectParameter total_VentaParameter;
            if (total_Venta != null)
            {
                total_VentaParameter = new ObjectParameter("Total_Venta", total_Venta);
            }
            else
            {
                total_VentaParameter = new ObjectParameter("Total_Venta", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Ventas>("REGISTRARVENTAS", id_VentasParameter, idProductoParameter, cantidad_VentaParameter, nombre_ProductoParameter, fechaVentaParameter, descuentoParameter, total_VentaParameter);
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="id_Ventas">No hay documentación de metadatos disponible.</param>
        /// <param name="idProducto">No hay documentación de metadatos disponible.</param>
        /// <param name="cantidad_Venta">No hay documentación de metadatos disponible.</param>
        /// <param name="nombre_Producto">No hay documentación de metadatos disponible.</param>
        /// <param name="fechaVenta">No hay documentación de metadatos disponible.</param>
        /// <param name="descuento">No hay documentación de metadatos disponible.</param>
        /// <param name="total_Venta">No hay documentación de metadatos disponible.</param>
        public ObjectResult<Ventas> REGISTRARVENTAS(global::System.String id_Ventas, global::System.String idProducto, global::System.String cantidad_Venta, global::System.String nombre_Producto, global::System.String fechaVenta, global::System.String descuento, global::System.String total_Venta, MergeOption mergeOption)
        {
            ObjectParameter id_VentasParameter;
            if (id_Ventas != null)
            {
                id_VentasParameter = new ObjectParameter("Id_Ventas", id_Ventas);
            }
            else
            {
                id_VentasParameter = new ObjectParameter("Id_Ventas", typeof(global::System.String));
            }
    
            ObjectParameter idProductoParameter;
            if (idProducto != null)
            {
                idProductoParameter = new ObjectParameter("IdProducto", idProducto);
            }
            else
            {
                idProductoParameter = new ObjectParameter("IdProducto", typeof(global::System.String));
            }
    
            ObjectParameter cantidad_VentaParameter;
            if (cantidad_Venta != null)
            {
                cantidad_VentaParameter = new ObjectParameter("Cantidad_Venta", cantidad_Venta);
            }
            else
            {
                cantidad_VentaParameter = new ObjectParameter("Cantidad_Venta", typeof(global::System.String));
            }
    
            ObjectParameter nombre_ProductoParameter;
            if (nombre_Producto != null)
            {
                nombre_ProductoParameter = new ObjectParameter("Nombre_Producto", nombre_Producto);
            }
            else
            {
                nombre_ProductoParameter = new ObjectParameter("Nombre_Producto", typeof(global::System.String));
            }
    
            ObjectParameter fechaVentaParameter;
            if (fechaVenta != null)
            {
                fechaVentaParameter = new ObjectParameter("FechaVenta", fechaVenta);
            }
            else
            {
                fechaVentaParameter = new ObjectParameter("FechaVenta", typeof(global::System.String));
            }
    
            ObjectParameter descuentoParameter;
            if (descuento != null)
            {
                descuentoParameter = new ObjectParameter("Descuento", descuento);
            }
            else
            {
                descuentoParameter = new ObjectParameter("Descuento", typeof(global::System.String));
            }
    
            ObjectParameter total_VentaParameter;
            if (total_Venta != null)
            {
                total_VentaParameter = new ObjectParameter("Total_Venta", total_Venta);
            }
            else
            {
                total_VentaParameter = new ObjectParameter("Total_Venta", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<Ventas>("REGISTRARVENTAS", mergeOption, id_VentasParameter, idProductoParameter, cantidad_VentaParameter, nombre_ProductoParameter, fechaVentaParameter, descuentoParameter, total_VentaParameter);
        }

        #endregion

    }

    #endregion

    #region Entidades
    
    /// <summary>
    /// No hay documentación de metadatos disponible.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBTecnoScienceModel", Name="Compras")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Compras : EntityObject
    {
        #region Método de generador
    
        /// <summary>
        /// Crear un nuevo objeto Compras.
        /// </summary>
        /// <param name="idCompra">Valor inicial de la propiedad IdCompra.</param>
        /// <param name="idProducto">Valor inicial de la propiedad IdProducto.</param>
        /// <param name="idProveedor">Valor inicial de la propiedad IdProveedor.</param>
        public static Compras CreateCompras(global::System.String idCompra, global::System.String idProducto, global::System.String idProveedor)
        {
            Compras compras = new Compras();
            compras.IdCompra = idCompra;
            compras.IdProducto = idProducto;
            compras.IdProveedor = idProveedor;
            return compras;
        }

        #endregion

        #region Propiedades primitivas
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String IdCompra
        {
            get
            {
                return _IdCompra;
            }
            set
            {
                if (_IdCompra != value)
                {
                    OnIdCompraChanging(value);
                    ReportPropertyChanging("IdCompra");
                    _IdCompra = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("IdCompra");
                    OnIdCompraChanged();
                }
            }
        }
        private global::System.String _IdCompra;
        partial void OnIdCompraChanging(global::System.String value);
        partial void OnIdCompraChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String IdProducto
        {
            get
            {
                return _IdProducto;
            }
            set
            {
                OnIdProductoChanging(value);
                ReportPropertyChanging("IdProducto");
                _IdProducto = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("IdProducto");
                OnIdProductoChanged();
            }
        }
        private global::System.String _IdProducto;
        partial void OnIdProductoChanging(global::System.String value);
        partial void OnIdProductoChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String IdProveedor
        {
            get
            {
                return _IdProveedor;
            }
            set
            {
                OnIdProveedorChanging(value);
                ReportPropertyChanging("IdProveedor");
                _IdProveedor = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("IdProveedor");
                OnIdProveedorChanged();
            }
        }
        private global::System.String _IdProveedor;
        partial void OnIdProveedorChanging(global::System.String value);
        partial void OnIdProveedorChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Nombre_Proveedor
        {
            get
            {
                return _Nombre_Proveedor;
            }
            set
            {
                OnNombre_ProveedorChanging(value);
                ReportPropertyChanging("Nombre_Proveedor");
                _Nombre_Proveedor = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Nombre_Proveedor");
                OnNombre_ProveedorChanged();
            }
        }
        private global::System.String _Nombre_Proveedor;
        partial void OnNombre_ProveedorChanging(global::System.String value);
        partial void OnNombre_ProveedorChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FechaDeCompra
        {
            get
            {
                return _FechaDeCompra;
            }
            set
            {
                OnFechaDeCompraChanging(value);
                ReportPropertyChanging("FechaDeCompra");
                _FechaDeCompra = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FechaDeCompra");
                OnFechaDeCompraChanged();
            }
        }
        private global::System.String _FechaDeCompra;
        partial void OnFechaDeCompraChanging(global::System.String value);
        partial void OnFechaDeCompraChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CantidadComprada
        {
            get
            {
                return _CantidadComprada;
            }
            set
            {
                OnCantidadCompradaChanging(value);
                ReportPropertyChanging("CantidadComprada");
                _CantidadComprada = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CantidadComprada");
                OnCantidadCompradaChanged();
            }
        }
        private global::System.String _CantidadComprada;
        partial void OnCantidadCompradaChanging(global::System.String value);
        partial void OnCantidadCompradaChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TotalCompra
        {
            get
            {
                return _TotalCompra;
            }
            set
            {
                OnTotalCompraChanging(value);
                ReportPropertyChanging("TotalCompra");
                _TotalCompra = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TotalCompra");
                OnTotalCompraChanged();
            }
        }
        private global::System.String _TotalCompra;
        partial void OnTotalCompraChanging(global::System.String value);
        partial void OnTotalCompraChanged();

        #endregion

    
        #region Propiedades de navegación
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBTecnoScienceModel", "FK_Productoo", "Productos")]
        public Productos Productos
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Productos>("DBTecnoScienceModel.FK_Productoo", "Productos").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Productos>("DBTecnoScienceModel.FK_Productoo", "Productos").Value = value;
            }
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Productos> ProductosReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Productos>("DBTecnoScienceModel.FK_Productoo", "Productos");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Productos>("DBTecnoScienceModel.FK_Productoo", "Productos", value);
                }
            }
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBTecnoScienceModel", "FK_Proveedor", "Proveedores")]
        public Proveedores Proveedores
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Proveedores>("DBTecnoScienceModel.FK_Proveedor", "Proveedores").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Proveedores>("DBTecnoScienceModel.FK_Proveedor", "Proveedores").Value = value;
            }
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Proveedores> ProveedoresReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Proveedores>("DBTecnoScienceModel.FK_Proveedor", "Proveedores");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Proveedores>("DBTecnoScienceModel.FK_Proveedor", "Proveedores", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No hay documentación de metadatos disponible.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBTecnoScienceModel", Name="Productos")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Productos : EntityObject
    {
        #region Método de generador
    
        /// <summary>
        /// Crear un nuevo objeto Productos.
        /// </summary>
        /// <param name="idProducto">Valor inicial de la propiedad IdProducto.</param>
        public static Productos CreateProductos(global::System.String idProducto)
        {
            Productos productos = new Productos();
            productos.IdProducto = idProducto;
            return productos;
        }

        #endregion

        #region Propiedades primitivas
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String IdProducto
        {
            get
            {
                return _IdProducto;
            }
            set
            {
                if (_IdProducto != value)
                {
                    OnIdProductoChanging(value);
                    ReportPropertyChanging("IdProducto");
                    _IdProducto = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("IdProducto");
                    OnIdProductoChanged();
                }
            }
        }
        private global::System.String _IdProducto;
        partial void OnIdProductoChanging(global::System.String value);
        partial void OnIdProductoChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Nombre_Producto
        {
            get
            {
                return _Nombre_Producto;
            }
            set
            {
                OnNombre_ProductoChanging(value);
                ReportPropertyChanging("Nombre_Producto");
                _Nombre_Producto = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Nombre_Producto");
                OnNombre_ProductoChanged();
            }
        }
        private global::System.String _Nombre_Producto;
        partial void OnNombre_ProductoChanging(global::System.String value);
        partial void OnNombre_ProductoChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Cantidad_Existente
        {
            get
            {
                return _Cantidad_Existente;
            }
            set
            {
                OnCantidad_ExistenteChanging(value);
                ReportPropertyChanging("Cantidad_Existente");
                _Cantidad_Existente = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Cantidad_Existente");
                OnCantidad_ExistenteChanged();
            }
        }
        private global::System.String _Cantidad_Existente;
        partial void OnCantidad_ExistenteChanging(global::System.String value);
        partial void OnCantidad_ExistenteChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Precio_Unitario
        {
            get
            {
                return _Precio_Unitario;
            }
            set
            {
                OnPrecio_UnitarioChanging(value);
                ReportPropertyChanging("Precio_Unitario");
                _Precio_Unitario = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Precio_Unitario");
                OnPrecio_UnitarioChanged();
            }
        }
        private global::System.String _Precio_Unitario;
        partial void OnPrecio_UnitarioChanging(global::System.String value);
        partial void OnPrecio_UnitarioChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Categoria_Producto
        {
            get
            {
                return _Categoria_Producto;
            }
            set
            {
                OnCategoria_ProductoChanging(value);
                ReportPropertyChanging("Categoria_Producto");
                _Categoria_Producto = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Categoria_Producto");
                OnCategoria_ProductoChanged();
            }
        }
        private global::System.String _Categoria_Producto;
        partial void OnCategoria_ProductoChanging(global::System.String value);
        partial void OnCategoria_ProductoChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Marca_Producto
        {
            get
            {
                return _Marca_Producto;
            }
            set
            {
                OnMarca_ProductoChanging(value);
                ReportPropertyChanging("Marca_Producto");
                _Marca_Producto = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Marca_Producto");
                OnMarca_ProductoChanged();
            }
        }
        private global::System.String _Marca_Producto;
        partial void OnMarca_ProductoChanging(global::System.String value);
        partial void OnMarca_ProductoChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Descripcion_Producto
        {
            get
            {
                return _Descripcion_Producto;
            }
            set
            {
                OnDescripcion_ProductoChanging(value);
                ReportPropertyChanging("Descripcion_Producto");
                _Descripcion_Producto = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Descripcion_Producto");
                OnDescripcion_ProductoChanged();
            }
        }
        private global::System.String _Descripcion_Producto;
        partial void OnDescripcion_ProductoChanging(global::System.String value);
        partial void OnDescripcion_ProductoChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ImagenMerc
        {
            get
            {
                return _ImagenMerc;
            }
            set
            {
                OnImagenMercChanging(value);
                ReportPropertyChanging("ImagenMerc");
                _ImagenMerc = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ImagenMerc");
                OnImagenMercChanged();
            }
        }
        private global::System.String _ImagenMerc;
        partial void OnImagenMercChanging(global::System.String value);
        partial void OnImagenMercChanged();

        #endregion

    
        #region Propiedades de navegación
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBTecnoScienceModel", "FK_Productoo", "Compras")]
        public EntityCollection<Compras> Compras
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Compras>("DBTecnoScienceModel.FK_Productoo", "Compras");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Compras>("DBTecnoScienceModel.FK_Productoo", "Compras", value);
                }
            }
        }
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBTecnoScienceModel", "FK_Productos", "Ventas")]
        public EntityCollection<Ventas> Ventas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Ventas>("DBTecnoScienceModel.FK_Productos", "Ventas");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Ventas>("DBTecnoScienceModel.FK_Productos", "Ventas", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No hay documentación de metadatos disponible.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBTecnoScienceModel", Name="Proveedores")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Proveedores : EntityObject
    {
        #region Método de generador
    
        /// <summary>
        /// Crear un nuevo objeto Proveedores.
        /// </summary>
        /// <param name="idProveedor">Valor inicial de la propiedad IdProveedor.</param>
        /// <param name="nombreProveedor">Valor inicial de la propiedad NombreProveedor.</param>
        public static Proveedores CreateProveedores(global::System.String idProveedor, global::System.String nombreProveedor)
        {
            Proveedores proveedores = new Proveedores();
            proveedores.IdProveedor = idProveedor;
            proveedores.NombreProveedor = nombreProveedor;
            return proveedores;
        }

        #endregion

        #region Propiedades primitivas
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String IdProveedor
        {
            get
            {
                return _IdProveedor;
            }
            set
            {
                if (_IdProveedor != value)
                {
                    OnIdProveedorChanging(value);
                    ReportPropertyChanging("IdProveedor");
                    _IdProveedor = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("IdProveedor");
                    OnIdProveedorChanged();
                }
            }
        }
        private global::System.String _IdProveedor;
        partial void OnIdProveedorChanging(global::System.String value);
        partial void OnIdProveedorChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NombreProveedor
        {
            get
            {
                return _NombreProveedor;
            }
            set
            {
                OnNombreProveedorChanging(value);
                ReportPropertyChanging("NombreProveedor");
                _NombreProveedor = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("NombreProveedor");
                OnNombreProveedorChanged();
            }
        }
        private global::System.String _NombreProveedor;
        partial void OnNombreProveedorChanging(global::System.String value);
        partial void OnNombreProveedorChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DireccionProveedor
        {
            get
            {
                return _DireccionProveedor;
            }
            set
            {
                OnDireccionProveedorChanging(value);
                ReportPropertyChanging("DireccionProveedor");
                _DireccionProveedor = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DireccionProveedor");
                OnDireccionProveedorChanged();
            }
        }
        private global::System.String _DireccionProveedor;
        partial void OnDireccionProveedorChanging(global::System.String value);
        partial void OnDireccionProveedorChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TelefonoProveedor
        {
            get
            {
                return _TelefonoProveedor;
            }
            set
            {
                OnTelefonoProveedorChanging(value);
                ReportPropertyChanging("TelefonoProveedor");
                _TelefonoProveedor = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TelefonoProveedor");
                OnTelefonoProveedorChanged();
            }
        }
        private global::System.String _TelefonoProveedor;
        partial void OnTelefonoProveedorChanging(global::System.String value);
        partial void OnTelefonoProveedorChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CiudadProveedor
        {
            get
            {
                return _CiudadProveedor;
            }
            set
            {
                OnCiudadProveedorChanging(value);
                ReportPropertyChanging("CiudadProveedor");
                _CiudadProveedor = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CiudadProveedor");
                OnCiudadProveedorChanged();
            }
        }
        private global::System.String _CiudadProveedor;
        partial void OnCiudadProveedorChanging(global::System.String value);
        partial void OnCiudadProveedorChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EstadoProveedor
        {
            get
            {
                return _EstadoProveedor;
            }
            set
            {
                OnEstadoProveedorChanging(value);
                ReportPropertyChanging("EstadoProveedor");
                _EstadoProveedor = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EstadoProveedor");
                OnEstadoProveedorChanged();
            }
        }
        private global::System.String _EstadoProveedor;
        partial void OnEstadoProveedorChanging(global::System.String value);
        partial void OnEstadoProveedorChanged();

        #endregion

    
        #region Propiedades de navegación
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBTecnoScienceModel", "FK_Proveedor", "Compras")]
        public EntityCollection<Compras> Compras
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Compras>("DBTecnoScienceModel.FK_Proveedor", "Compras");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Compras>("DBTecnoScienceModel.FK_Proveedor", "Compras", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No hay documentación de metadatos disponible.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBTecnoScienceModel", Name="Ventas")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Ventas : EntityObject
    {
        #region Método de generador
    
        /// <summary>
        /// Crear un nuevo objeto Ventas.
        /// </summary>
        /// <param name="id_Ventas">Valor inicial de la propiedad Id_Ventas.</param>
        /// <param name="idProducto">Valor inicial de la propiedad IdProducto.</param>
        public static Ventas CreateVentas(global::System.String id_Ventas, global::System.String idProducto)
        {
            Ventas ventas = new Ventas();
            ventas.Id_Ventas = id_Ventas;
            ventas.IdProducto = idProducto;
            return ventas;
        }

        #endregion

        #region Propiedades primitivas
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Id_Ventas
        {
            get
            {
                return _Id_Ventas;
            }
            set
            {
                if (_Id_Ventas != value)
                {
                    OnId_VentasChanging(value);
                    ReportPropertyChanging("Id_Ventas");
                    _Id_Ventas = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Id_Ventas");
                    OnId_VentasChanged();
                }
            }
        }
        private global::System.String _Id_Ventas;
        partial void OnId_VentasChanging(global::System.String value);
        partial void OnId_VentasChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String IdProducto
        {
            get
            {
                return _IdProducto;
            }
            set
            {
                OnIdProductoChanging(value);
                ReportPropertyChanging("IdProducto");
                _IdProducto = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("IdProducto");
                OnIdProductoChanged();
            }
        }
        private global::System.String _IdProducto;
        partial void OnIdProductoChanging(global::System.String value);
        partial void OnIdProductoChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Cantidad_Venta
        {
            get
            {
                return _Cantidad_Venta;
            }
            set
            {
                OnCantidad_VentaChanging(value);
                ReportPropertyChanging("Cantidad_Venta");
                _Cantidad_Venta = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Cantidad_Venta");
                OnCantidad_VentaChanged();
            }
        }
        private global::System.String _Cantidad_Venta;
        partial void OnCantidad_VentaChanging(global::System.String value);
        partial void OnCantidad_VentaChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Nombre_Producto
        {
            get
            {
                return _Nombre_Producto;
            }
            set
            {
                OnNombre_ProductoChanging(value);
                ReportPropertyChanging("Nombre_Producto");
                _Nombre_Producto = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Nombre_Producto");
                OnNombre_ProductoChanged();
            }
        }
        private global::System.String _Nombre_Producto;
        partial void OnNombre_ProductoChanging(global::System.String value);
        partial void OnNombre_ProductoChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FechaVenta
        {
            get
            {
                return _FechaVenta;
            }
            set
            {
                OnFechaVentaChanging(value);
                ReportPropertyChanging("FechaVenta");
                _FechaVenta = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FechaVenta");
                OnFechaVentaChanged();
            }
        }
        private global::System.String _FechaVenta;
        partial void OnFechaVentaChanging(global::System.String value);
        partial void OnFechaVentaChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Descuento
        {
            get
            {
                return _Descuento;
            }
            set
            {
                OnDescuentoChanging(value);
                ReportPropertyChanging("Descuento");
                _Descuento = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Descuento");
                OnDescuentoChanged();
            }
        }
        private global::System.String _Descuento;
        partial void OnDescuentoChanging(global::System.String value);
        partial void OnDescuentoChanged();
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Total_Venta
        {
            get
            {
                return _Total_Venta;
            }
            set
            {
                OnTotal_VentaChanging(value);
                ReportPropertyChanging("Total_Venta");
                _Total_Venta = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Total_Venta");
                OnTotal_VentaChanged();
            }
        }
        private global::System.String _Total_Venta;
        partial void OnTotal_VentaChanging(global::System.String value);
        partial void OnTotal_VentaChanged();

        #endregion

    
        #region Propiedades de navegación
    
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBTecnoScienceModel", "FK_Productos", "Productos")]
        public Productos Productos
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Productos>("DBTecnoScienceModel.FK_Productos", "Productos").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Productos>("DBTecnoScienceModel.FK_Productos", "Productos").Value = value;
            }
        }
        /// <summary>
        /// No hay documentación de metadatos disponible.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Productos> ProductosReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Productos>("DBTecnoScienceModel.FK_Productos", "Productos");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Productos>("DBTecnoScienceModel.FK_Productos", "Productos", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
